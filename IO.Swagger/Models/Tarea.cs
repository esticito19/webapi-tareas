/*
 * Web API Tareas
 *
 * Servicio de Gestión de Tareas: proporciona los métodos necesarios para la consulta, creación, actualización y borrado de las tareas a los usuarios autorizados.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Tarea : IEquatable<Tarea>
    { 
        /// <summary>
        /// Id de la Tarea
        /// </summary>
        /// <value>Id de la Tarea</value>
        [DataMember(Name="Id")]
        public int Id { get; set; }

        /// <summary>
        /// Fecha Creación de la Tarea
        /// </summary>
        /// <value>Fecha Creación de la Tarea</value>
        [DataMember(Name="fecha_creacion")]
        public DateTime? FechaCreacion { get; set; }

        /// <summary>
        /// Descripción de la Tarea
        /// </summary>
        /// <value>Descripción de la Tarea</value>
        [DataMember(Name="descripcion")]
        public string Descripcion { get; set; }

        /// <summary>
        /// Indicador de si la Tarea se encuentra finalizada (true/false)
        /// </summary>
        /// <value>Indicador de si la Tarea se encuentra finalizada (true/false)</value>
        [DataMember(Name="ind_finalizada")]
        public bool? IndFinalizada { get; set; }

        /// <summary>
        /// Fecha Vencimiento de la Tarea
        /// </summary>
        /// <value>Fecha Vencimiento de la Tarea</value>
        [DataMember(Name="fecha_vencimiento")]
        public DateTime? FechaVencimiento { get; set; }

        /// <summary>
        /// Usuario dueño de la Tarea
        /// </summary>
        /// <value>Usuario dueño de la Tarea</value>
        [DataMember(Name="usuario")]
        public string Usuario { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tarea {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FechaCreacion: ").Append(FechaCreacion).Append("\n");
            sb.Append("  Descripcion: ").Append(Descripcion).Append("\n");
            sb.Append("  IndFinalizada: ").Append(IndFinalizada).Append("\n");
            sb.Append("  FechaVencimiento: ").Append(FechaVencimiento).Append("\n");
            sb.Append("  Usuario: ").Append(Usuario).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Tarea)obj);
        }

        /// <summary>
        /// Returns true if Tarea instances are equal
        /// </summary>
        /// <param name="other">Instance of Tarea to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tarea other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    FechaCreacion == other.FechaCreacion ||
                    FechaCreacion != null &&
                    FechaCreacion.Equals(other.FechaCreacion)
                ) && 
                (
                    Descripcion == other.Descripcion ||
                    Descripcion != null &&
                    Descripcion.Equals(other.Descripcion)
                ) && 
                (
                    IndFinalizada == other.IndFinalizada ||
                    IndFinalizada != null &&
                    IndFinalizada.Equals(other.IndFinalizada)
                ) && 
                (
                    FechaVencimiento == other.FechaVencimiento ||
                    FechaVencimiento != null &&
                    FechaVencimiento.Equals(other.FechaVencimiento)
                ) && 
                (
                    Usuario == other.Usuario ||
                    Usuario != null &&
                    Usuario.Equals(other.Usuario)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (FechaCreacion != null)
                    hashCode = hashCode * 59 + FechaCreacion.GetHashCode();
                    if (Descripcion != null)
                    hashCode = hashCode * 59 + Descripcion.GetHashCode();
                    if (IndFinalizada != null)
                    hashCode = hashCode * 59 + IndFinalizada.GetHashCode();
                    if (FechaVencimiento != null)
                    hashCode = hashCode * 59 + FechaVencimiento.GetHashCode();
                    if (Usuario != null)
                    hashCode = hashCode * 59 + Usuario.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Tarea left, Tarea right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Tarea left, Tarea right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
